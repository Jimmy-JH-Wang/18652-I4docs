# check swagger documentation here: https://swagger.io/docs/specification/2-0/what-is-swagger/
# Strongly suggested installing Jetbrains "Swagger" plugin

swagger: "2.0"
info:
  title: Emergency Social Network
  description: This network is intended to use as a social connecting tool in case of emergency.
  version: 1.0.0
basePath: /api
schemes:
  - http
paths:
  /login:
    post:
      tags:
        - "auth"
      summary: Login to the system or create a new user if not found.
      parameters:
        - in: body
          name: authInfo
          description: Authentication info
          required: true
          schema:
            type: object
            required:
              - username
            properties:
              username:
                type: string
              password:
                type: string
              isNewUser:
                type: string
                description: If this parameter is anything except "1", the method will not create a user if the user info is not found.
      produces:
        - application/json
      responses:
        200:
          description: Authentication is accepted, or the user can be created. JWT is assigned when auth is accepted.
          schema:
            $ref: '#/definitions/LoginResponse'
        422:
          description: Authentication failed due to illegal / restricted username or password, or the password does not match with record.
          schema:
            $ref: '#/definitions/LoginResponse'
        500:
          description: Database error.
          schema:
            $ref: '#/definitions/LoginResponse'
  /logout:
    put:
      tags:
        - "auth"
      summary: Log out from the system.
      produces:
        - text/plain; charset=utf-8
      responses:
        200:
          description: The user successfully logged out from the system.
        302:
          description: The user did not logged into the system, and will be redirected to index page.

  /users:
    get:
      tags:
        - "users"
      summary: Returns a list of users.
      produces:
        - application/json
      responses:
        200:
          description: OK
    post:
      tags:
        - "users"
      summary: Create a new user.
      parameters:
        - in: body
          name: userInfo
          description: An object of user information to add a new user collection.
          schema:
            type: object
            required:
              - username
              - password
            properties:
              username:
                type: string
              password:
                type: string
              isActive:
                type: boolean
              status:
                type: string
              isOnline:
                type: boolean
      produces:
        - application/json
      responses:
        200:
          description: OK
  /users/{userId}:
    get:
      tags:
        - "users"
      summary: Find a user's information based on userId.
      parameters:
        - in: path
          name: userId
          type: string
          required: true
          description: hexadecimal ID of the user to get.
      produces:
        - application/json
      responses:
        200:
          description: OK
    put:
      tags:
        - "users"
      summary: Update a user's information based on userId and put body.
      parameters:
        - in: path
          name: userId
          type: string
          required: true
          description: hexadecimal ID of the user to get.
        - in: body
          name: updateInfo
          description: the information object need to update
          schema:
            type: object
            properties:
              username:
                type: string
              password:
                type: string
              isActive:
                type: boolean
              status:
                type: string
              isOnline:
                type: boolean
      produces:
        - application/json
      responses:
        200:
          description: OK
  /chats:
    get:
      tags:
        - "chats"
      summary: Get all chatrooms
      produces:
        - application/json
      responses:
        200:
          description: OK
    post:
      tags:
        - "chats"
      summary: Create a new chatroom
      produces:
        - application/json
      responses:
        200:
          description: OK
  /messages:
    get:
      tags:
        - "messages"
      summary: Get all past messages
      produces:
        - application/json
      responses:
        200:
          description: OK
    post:
      tags:
        - "messages"
      summary: Post a new message.
      produces:
        - application/json
      responses:
        200:
          description: OK
  /requestPosts:
    get:
      tags:
        - "requestPosts"
      summary: Get all request posts matching the filter
      parameters:
        - in: body
          name: isRequest
          required: true
          schema:
            type: string
            example: 0
            description: |
              Looking for resource supplies (0) or a resource requests(1)
        - in: body
          name: category
          schema:
            type: string
            example: 1
            description: |
              List only the category of the resource provided.
              Limited to "Food&Water"(1), "FirstAid"(2), "Tools&Equipment"(3).
        - in: body
          name: time
          schema:
            type: string
            example: 1
            description: |
              List only the posts within some time range. Provided options are
              (1) within 1 hour
              (2) within 4 hours
              (3) within 1 day
              (4) within 3 days
        - in: body
          name: location
          schema:
            type: string
            example: 94043
            description:
              List only the posts at some zip code.
      produces:
        - application/json
      responses:
        200:
          description: Find all request posts matching the condition.
          schema:
            type: array
            items:
              $ref: '#/definitions/RPSimpleVO'
        500:
          description: Server Error.
    post:
      tags:
        - "requestPosts"
      summary: Create a new resource post
      parameters:
        - in: body
          name: form
          schema:
            $ref: '#/definitions/PostFormVO'
      responses:
        201:
          description: New resource post created.
        400:
          description: The form does not match the VO restrictions.
        500:
          description: Server Error.
  /requestPosts/mine:
    get:
      tags:
        - "requestPosts"
      summary: Get all request posts matching the filter that belongs to the logged in citizen
      parameters:
        - in: body
          name: category
          schema:
            type: string
            description: |
              List only the category of the resource provided.
              Limited to "Food&Water"(1), "FirstAid"(2), "Tools&Equipment"(3).
        - in: body
          name: time
          schema:
            type: string
            description: |
              List only the posts within some time range. Provided options are
              (1) within 1 hour
              (2) within 4 hours
              (3) within 1 day
              (4) within 3 days
        - in: body
          name: location
          schema:
            type: string
            description: |
              List only the posts at some zip code.
      produces:
        - application/json
      responses:
        200:
          description: Find all request posts matching the condition.
          schema:
            type: array
            items:
              $ref: '#/definitions/RPSimpleVO'
        500:
          description: Server Error.
  /requestPosts/{postId}:
    get:
      tags:
        - "requestPosts"
      summary: Get a request post information
      parameters:
        - in: path
          name: postId
          type: string
          required: true
          description: hexadecimal ID of the request post.
      produces:
        - application/json
      responses:
        200:
          description: The Request Post is found.
          schema:
            $ref: '#/definitions/RequestPostVO'
        404:
          description: The request post is not found.
        500:
          description: Server Error.
    put:
      tags:
        - "requestPosts"
      summary: Update a request post
      parameters:
        - in: path
          name: postId
          type: string
          required: true
          description: hexadecimal ID of the request post.
        - in: body
          name: form
          required: true
          schema:
            $ref: '#/definitions/PostFormVO'
      produces:
        - text/plain
      responses:
        200:
          description: The request is successfully updated.
        400:
          description: The form does not match the VO restrictions.
        404:
          description: The post with corresponding postId is not found.
        500:
          description: Server Error.
  /requestPosts/search:
    get:
      tags:
        - "requestPostsSearch"
      summary: Search a list of resource posts that has the keyword in title / remarks
      parameters:
        - in: body
          name: keyword
          schema:
            type: string
            description: |
              The keyword string, contains one or more keywords separated by spaces.
      responses:
        200:
          description: The search is successful and a list of resource posts is returned.
          schema:
            type: array
            items:
              $ref: '#/definitions/RPSimpleVO'
        400:
          description: Bad query string.
        500:
          description: Server Error.


definitions:
  LoginResponse:
    type: object
    required:
      - error
    properties:
      error:
        type: boolean
      redirect:
        type: string
        description: A link to redirect.
      errMessage:
        type: string
        description: In case auth failed, the error message is written here.
  RequestPostVO:
    type: object
    description: A full request post object used in RequestPost Use Case.
    required:
      - id
      - title
      - category
      - postType
      - active
      - quantity
      - zipcode
      - contact
      - timestamp
    properties:
      id:
        type: string
      title:
        type: string
      category:
        type: integer
        minimum: 1
        maximum: 3
        description: |
          Describes the category of the resource provided.
          Limited to "Food&Water"(1), "FirstAid"(2), "Tools&Equipment"(3).
      postType:
        type: boolean
        description: |
          Indicates whether this post is requesting some supply.
          If this field is false, it is providing some supply.
      active:
        type: boolean
        description: |
          Indicates whether the post is active.
          If this field is false, it indicates the post is inactive (outdated).
      quantity:
        type: integer
        description: |
          Describe the quantity of the resource provided / requested.
      zipcode:
        type: integer
        description: |
          A 5-digit US zip code indicating the geological location of the resource provided / requested.
      remarks:
        type: string
        description: |
          Any remark information that the sender wants to add to this post.
      contact:
        type: string
        description: |
          The user ID of the person who sends the post.'
      timestamp:
        type: string
        description: |
          The time when the post is updated.
  PostFormVO:
    type: object
    description: A form schema used when posting / updating a request post.
    required:
      - title
      - category
      - postType
      - active
      - quantity
      - zipcode
    properties:
      title:
        type: string
      category:
        type: integer
        minimum: 1
        maximum: 3
        description: |
          Describes the category of the resource provided.
          Limited to "Food&Water"(1), "FirstAid"(2), "Tools&Equipment"(3).
      postType:
        type: boolean
        description: |
          Indicates whether this post is requesting some supply.
          If this field is false, it is providing some supply.
      active:
        type: boolean
        description: |
          Indicates whether the post is active.
          If this field is false, it indicates the post is inactive (outdated).
      quantity:
        type: integer
        description: |
          Describe the quantity of the resource provided / requested.
      zipcode:
        type: integer
        description: |
          A 5-digit US zip code indicating the geological location of the resource provided / requested.
      remarks:
        type: string
        description: |
          Any remark information that the sender wants to add to this post.
  RPSimpleVO:
    type: object
    description: |
      A simple request post object used in RequestPost Use Case.
      This object is a simplified schema used when listing all posts.
    required:
      - id
      - title
      - category
      - postType
      - active
      - quantity
      - zipcode
      - timestamp
    properties:
      id:
        type: string
      title:
        type: string
      category:
        type: integer
        minimum: 1
        maximum: 3
        description: |
          Describes the category of the resource provided.
          Limited to "Food&Water"(1), "FirstAid"(2), "Tools&Equipment"(3).
      postType:
        type: boolean
        description: |
          Indicates whether this post is requesting some supply.
          If this field is false, it is providing some supply.
      active:
        type: boolean
        description: |
          Indicates whether the post is active.
          If this field is false, it indicates the post is inactive (outdated).
      quantity:
        type: integer
        description: |
          Describe the quantity of the resource provided / requested.
      zipcode:
        type: integer
        description: |
          A 5-digit US zip code indicating the geological location of the resource provided / requested.
      timestamp:
        type: string
        description: |
          The time when the post is updated.
